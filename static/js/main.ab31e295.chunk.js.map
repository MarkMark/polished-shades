{"version":3,"sources":["serviceWorker.ts","Styles/Settings/Settings.Grid.tsx","Styles/Settings/Settings.Colors.tsx","Styles/Settings/Settings.Global.tsx","Styles/Generics/Generics.Reset.tsx","Styles/Generics/Generics.ResetButton.tsx","Styles/Atoms/Atoms.Buttons.tsx","Styles/Atoms/Atoms.Inputs.tsx","Styles/Elements/Elements.Box.tsx","Styles/Elements/Elements.Text.tsx","Scenes/Tool/Styles/Tool.Styles.tsx","Scenes/Tool/Components/Content.tsx","Scenes/Tool/Components/Heading.tsx","Scenes/Tool/Tool.tsx","Main/Main.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","GRID","row","padding","col","container","COLORS","colorBlack","colorBlackText","colorBlackTextSecondary","colorBlackTextHint","colorBlackIcons","colorBlackDisabled","colorBlackDividers","colorWhite","colorWhiteText","colorWhiteTextSecondary","colorWhiteTextHint","colorWhiteIcons","colorWhiteDisabled","colorWhiteDividers","colorAccentGreen","colorAccentBlue","colorAccentYellow","colorAccentRed","colorAccentGrey","CSS_GLOBAL","fontFamily","fontWeightRegular","fontWeightBold","lineHeight","fontSizeRegular","rem","fontSizeSmall","fontSizeXS","fontSizeLarge","fontSizeXL","borderRadius","p0","p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","s0","s1","s2","s3","s4","s5","s6","s7","s8","s9","s10","GReset","createGlobalStyle","GResetBtn","css","ABtn","Ghost","styled","button","space","color","typography","layout","flexbox","background","border","position","shadow","AInput","input","EBox","div","grid","EText","p","Item","ItemText","STL","IconCopy","Copy","Content","useState","setColor","isValid","string","matches","isValidSync","mb","textAlign","value","placeholder","onChange","e","target","maxWidth","map","s","i","key","c","display","gridAutoFlow","Array","_","amount","String","padStart","lighten","darken","text","toLocaleUpperCase","flex","backgroundColor","rgba","bottom","fontSize","left","right","Heading","as","fontWeight","role","aria-label","Tool","paddingY","Component","Main","App","gridTheme","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab31e295.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const GRID = {\n  row: {\n    padding: 16\n  },\n  col: {\n    padding: 16\n  },\n  container: {\n    padding: 16\n  }\n}\n","export const COLORS = {\n  colorBlack: '#000',\n  colorBlackText: 'rgba(0, 0, 0, 0.87)',\n  colorBlackTextSecondary: 'rgba(0, 0, 0, 0.54)',\n  colorBlackTextHint: 'rgba(0, 0, 0, 0.26)',\n  colorBlackIcons: 'rgba(0, 0, 0, 0.54)',\n  colorBlackDisabled: 'rgba(0, 0, 0, 0.26)',\n  colorBlackDividers: 'rgba(0, 0, 0, 0.12)',\n\n  colorWhite: '#FFF',\n  colorWhiteText: '#FFF',\n  colorWhiteTextSecondary: 'rgba(255, 255, 255, 0.7)',\n  colorWhiteTextHint: 'rgba(255, 255, 255, 0.3)',\n  colorWhiteIcons: '#FFF',\n  colorWhiteDisabled: 'rgba(255, 255, 255, 0.3)',\n  colorWhiteDividers: 'rgba(255, 255, 255, 0.12)',\n\n  colorAccentGreen: '#00cec9',\n  colorAccentBlue: '#0984e3',\n  colorAccentYellow: '#fdcb6e',\n  colorAccentRed: '#d63031',\n  colorAccentGrey: '#2d3436'\n}\n","import { rem } from 'polished'\n\nexport const CSS_GLOBAL = {\n  fontFamily: `'Work Sans', sans-serif`,\n\n  fontWeightRegular: 400,\n  fontWeightBold: 500,\n\n  lineHeight: 1.5,\n\n  fontSizeRegular: rem('18px'),\n  fontSizeSmall: rem('16px'),\n  fontSizeXS: rem('14px'),\n  fontSizeLarge: rem('20px'),\n  fontSizeXL: rem('22px'),\n\n  borderRadius: rem('3px'),\n\n  p0: rem('0px'),\n  p1: rem('8px'),\n  p2: rem('16px'),\n  p3: rem('24px'),\n  p4: rem('32px'),\n  p5: rem('40px'),\n  p6: rem('48px'),\n  p7: rem('56px'),\n  p8: rem('64px'),\n  p9: rem('72px'),\n  p10: rem('80px'),\n  s0: rem('0px'),\n  s1: rem('4px'),\n  s2: rem('12px'),\n  s3: rem('20px'),\n  s4: rem('28px'),\n  s5: rem('36px'),\n  s6: rem('44px'),\n  s7: rem('52px'),\n  s8: rem('60px'),\n  s9: rem('68px'),\n  s10: rem('76px')\n}\n","import { COLORS } from '../Settings/Settings.Colors'\nimport { CSS_GLOBAL } from '../Settings/Settings.Global'\nimport { createGlobalStyle } from 'styled-components'\nimport { rem } from 'polished'\n\nexport const GReset = createGlobalStyle`\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n\n  /* Overwrites */\n  body {\n    color: ${COLORS.colorBlackText};\n    font-family: ${CSS_GLOBAL.fontFamily};\n    font-size: ${CSS_GLOBAL.fontSizeRegular};\n    font-weight: ${CSS_GLOBAL.fontWeightRegular};\n    line-height: ${CSS_GLOBAL.lineHeight};\n  }\n\n  address,\n  h1, h2, h3, h4, h5, h6,\n  blockquote, p, pre,\n  dl, ol, ul,\n  figure,\n  hr,\n  table,\n  fieldset {\n    margin-bottom: ${CSS_GLOBAL.p2};\n  }\n\n  h1 {\n    font-size: ${rem('28px')};\n  }\n  h2 {\n    font-size: ${rem('26px')};\n  }\n  h3 {\n    font-size: ${rem('24px')};\n  }\n  h4 {\n    font-size: ${rem('22px')};\n  }\n  h5 {\n    font-size: ${rem('20px')};\n  }\n  h6 {\n    font-size: ${rem('18px')};\n  }\n\n`\n","import { css } from 'styled-components'\n\nexport const GResetBtn = css`\n  -moz-osx-font-smoothing: inherit;\n  -webkit-appearance: none;\n  -webkit-font-smoothing: inherit;\n  background: transparent;\n  border: none;\n  color: inherit;\n  cursor: pointer;\n  font: inherit;\n  line-height: normal;\n  margin: 0;\n  overflow: visible;\n  padding: 0;\n  width: auto;\n\n  ::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n  }\n`\n","import {\n  BackgroundProps,\n  BorderProps,\n  ColorProps,\n  FlexboxProps,\n  LayoutProps,\n  PositionProps,\n  ShadowProps,\n  SpaceProps,\n  TypographyProps,\n  background,\n  border,\n  color,\n  flexbox,\n  layout,\n  position,\n  shadow,\n  space,\n  typography\n} from 'styled-system'\n\nimport { GResetBtn } from '../Generics/Generics.ResetButton'\nimport styled from 'styled-components'\n\ntype TGhost = SpaceProps &\n  ColorProps &\n  TypographyProps &\n  LayoutProps &\n  FlexboxProps &\n  BackgroundProps &\n  BorderProps &\n  PositionProps &\n  ShadowProps\nconst Ghost = styled.button<TGhost>`\n  ${GResetBtn};\n  ${space};\n  ${color};\n  ${typography};\n  ${layout};\n  ${flexbox};\n  ${background};\n  ${border};\n  ${position};\n  ${shadow};\n`\n\nexport const ABtn = {\n  Ghost\n}\n","import { LayoutProps, TypographyProps, layout, typography } from 'styled-system'\n\nimport { COLORS } from '../Settings/Settings.Colors'\nimport { CSS_GLOBAL } from '../Settings/Settings.Global'\nimport { rem } from 'polished'\nimport styled from 'styled-components'\n\ntype TAInput = LayoutProps & TypographyProps\nexport const AInput = styled.input<TAInput>`\n  border: ${rem('1px')} solid ${COLORS.colorBlackDividers};\n  border-radius: ${CSS_GLOBAL.borderRadius};\n  display: inline-block;\n  font-size: ${CSS_GLOBAL.fontSizeRegular};\n  line-height: ${CSS_GLOBAL.lineHeight};\n  margin-bottom: ${CSS_GLOBAL.p2};\n  padding: ${CSS_GLOBAL.p2};\n  transition: border-color 0.2s ease-in-out;\n  width: 100%;\n  ${layout};\n  ${typography};\n\n  :focus {\n    border-color: ${COLORS.colorAccentBlue};\n    outline: none;\n  }\n`\n","import {\n  BackgroundProps,\n  BorderProps,\n  ColorProps,\n  FlexboxProps,\n  GridProps,\n  LayoutProps,\n  PositionProps,\n  ShadowProps,\n  SpaceProps,\n  TypographyProps,\n  background,\n  border,\n  color,\n  flexbox,\n  grid,\n  layout,\n  position,\n  shadow,\n  space,\n  typography\n} from 'styled-system'\n\nimport styled from 'styled-components'\n\ntype TEBox = SpaceProps &\n  ColorProps &\n  TypographyProps &\n  LayoutProps &\n  FlexboxProps &\n  GridProps &\n  BackgroundProps &\n  BorderProps &\n  PositionProps &\n  ShadowProps\nexport const EBox = styled.div<TEBox>`\n  ${space};\n  ${color};\n  ${typography};\n  ${layout};\n  ${flexbox};\n  ${grid};\n  ${background};\n  ${border};\n  ${position};\n  ${shadow};\n`\n","import {\n  BorderProps,\n  ColorProps,\n  FlexboxProps,\n  LayoutProps,\n  PositionProps,\n  SpaceProps,\n  TypographyProps,\n  border,\n  color,\n  flexbox,\n  layout,\n  position,\n  space,\n  typography\n} from 'styled-system'\n\nimport styled from 'styled-components'\n\ntype TEText = BorderProps &\n  ColorProps &\n  FlexboxProps &\n  LayoutProps &\n  PositionProps &\n  SpaceProps &\n  TypographyProps\nexport const EText = styled.p<TEText>`\n  ${border};\n  ${color};\n  ${flexbox};\n  ${layout};\n  ${position};\n  ${space};\n  ${typography};\n`\n","import { COLORS } from '../../../Styles/Settings/Settings.Colors'\nimport { Copy } from 'styled-icons/boxicons-regular'\nimport { EBox } from '../../../Styles/Elements/Elements.Box'\nimport { EText } from '../../../Styles/Elements/Elements.Text'\nimport { rem } from 'polished'\nimport styled from 'styled-components'\n\nconst Item = styled(EBox)`\n  max-height: ${rem('150px')};\n\n  ::before {\n    content: '';\n    display: inline-block;\n    padding-top: 100%;\n    width: 0;\n  }\n`\n\nconst ItemText = styled(EText)`\n  color: ${COLORS.colorWhiteText};\n  /* mix-blend-mode: difference; */\n`\n\nconst IconCopy = styled(Copy)`\n  bottom: 0;\n  color: ${COLORS.colorWhiteText};\n  left: 0;\n  margin: auto;\n  mix-blend-mode: difference;\n  opacity: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  transition: opacity 0.2s ease-in-out;\n  width: 20px;\n\n  button:hover > & {\n    opacity: 1;\n  }\n`\n\nexport const STL = {\n  Item,\n  IconCopy,\n  ItemText\n}\n","import React, { useState } from 'react'\nimport { darken, lighten, rem, rgba } from 'polished'\n\nimport { ABtn } from '../../../Styles/Atoms/Atoms.Buttons'\nimport { AInput } from '../../../Styles/Atoms/Atoms.Inputs'\nimport { COLORS } from '../../../Styles/Settings/Settings.Colors'\nimport { CSS_GLOBAL } from '../../../Styles/Settings/Settings.Global'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { EBox } from '../../../Styles/Elements/Elements.Box'\nimport { STL } from '../Styles/Tool.Styles'\nimport { string } from 'yup'\n\nexport default function Content() {\n  const [color, setColor] = useState([''])\n  const shade = ['Lighten', 'Darken']\n  const schema = string().matches(/^#([0-9a-f]{3}|[0-9a-f]{6})$/i)\n  const isValid = schema.isValidSync(color[0])\n\n  return (\n    <EBox>\n      <EBox mb={CSS_GLOBAL.p5} textAlign=\"center\">\n        <AInput\n          value={color}\n          placeholder=\"#FFF\"\n          onChange={e => setColor([e.target.value])}\n          maxWidth={rem('320px')}\n          textAlign=\"center\"\n        />\n      </EBox>\n\n      {isValid &&\n        shade.map((s, i) => {\n          return (\n            <EBox\n              key={i}\n              mb={CSS_GLOBAL.p4}\n              border={`${rem('1px')} solid ${COLORS.colorBlackDividers}`}\n            >\n              {color.map((c, i) => (\n                <EBox key={i} display=\"grid\" gridAutoFlow=\"column\">\n                  {[...new Array(11)].map((_, i) => {\n                    const amount = String(i).padStart(3, '0.')\n                    const color =\n                      s === 'Lighten' ? lighten(amount, c) : darken(amount, c)\n\n                    return (\n                      <STL.Item key={i} background={color} display=\"flex\">\n                        <CopyToClipboard\n                          text={String(color).toLocaleUpperCase()}\n                        >\n                          <ABtn.Ghost\n                            display=\"flex\"\n                            flex=\"1\"\n                            position=\"relative\"\n                          >\n                            <STL.IconCopy />\n\n                            <STL.ItemText\n                              backgroundColor={rgba(COLORS.colorBlack, 0.3)}\n                              bottom=\"0\"\n                              flex=\"1\"\n                              fontSize={CSS_GLOBAL.fontSizeXS}\n                              left=\"0\"\n                              mb={CSS_GLOBAL.p0}\n                              padding={CSS_GLOBAL.s1}\n                              position=\"absolute\"\n                              right=\"0\"\n                              textAlign=\"center\"\n                            >\n                              {String(color).toLocaleUpperCase()}\n                            </STL.ItemText>\n                          </ABtn.Ghost>\n                        </CopyToClipboard>\n                      </STL.Item>\n                    )\n                  })}\n                </EBox>\n              ))}\n            </EBox>\n          )\n        })}\n    </EBox>\n  )\n}\n","import { CSS_GLOBAL } from '../../../Styles/Settings/Settings.Global'\nimport { EBox } from '../../../Styles/Elements/Elements.Box'\nimport { EText } from '../../../Styles/Elements/Elements.Text'\nimport React from 'react'\n\nexport default function Heading() {\n  return (\n    <EBox textAlign=\"center\" mb={CSS_GLOBAL.p10}>\n      <EText as=\"h1\" fontWeight={CSS_GLOBAL.fontWeightBold}>\n        Shade{' '}\n        <span role=\"img\" aria-label=\"shade emoji\">\n          😎\n        </span>\n      </EText>\n\n      <EText>\n        A polished{' '}\n        <span role=\"img\" aria-label=\"sparkle emoji\">\n          ✨\n        </span>{' '}\n        shade generator\n      </EText>\n    </EBox>\n  )\n}\n","import { Col, Container, Row } from 'styled-bootstrap-grid'\nimport React, { Component } from 'react'\n\nimport { CSS_GLOBAL } from '../../Styles/Settings/Settings.Global'\nimport Content from './Components/Content'\nimport { EBox } from '../../Styles/Elements/Elements.Box'\nimport Heading from './Components/Heading'\n\nexport default class Tool extends Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <EBox as=\"section\" paddingY={CSS_GLOBAL.p10}>\n              <Heading />\n\n              <Content />\n            </EBox>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n","import React from 'react'\nimport Tool from '../Scenes/Tool/Tool'\n\nexport default function Main() {\n  return <Tool />\n}\n","import { BaseCSS, GridThemeProvider } from 'styled-bootstrap-grid'\nimport React, { Fragment } from 'react'\n\nimport { GRID } from './Styles/Settings/Settings.Grid'\nimport { GReset } from './Styles/Generics/Generics.Reset'\nimport Main from './Main/Main'\n\nconst App: React.FC = () => {\n  return (\n    <Fragment>\n      <GReset />\n      <BaseCSS />\n      <GridThemeProvider gridTheme={GRID}>\n        <Main />\n      </GridThemeProvider>\n    </Fragment>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}